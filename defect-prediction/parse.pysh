import re
from io import StringIO
import numpy as np
import pandas as pd
from numpy import array
from pprint import pprint


def get_max_rows(group, col1='pd-pf', col2='f1'):
    max_val1 = group[col1].max()

    if len(group[group[col1] == max_val1]) == 1:
        return group[group[col1] == max_val1]

    max_val2 = group[col2].max()
    return group[(group[col1] == max_val1) & (group[col2] == max_val2)]


pairs = {}

files1 = ['ivy', 'lucene', 'poi', 'synapse', 'velocity', 'camel', 'jedit', 'log4j', 'xalan', 'xerces']
files2 = ['ivy1', 'lucene1', 'lucene2', 'poi1', 'poi2', 'synapse1', 'synapse2', 'camel1', 'camel2', 'xerces1', 'jedit1', 'jedit2', 'log4j1', 'xalan1']

for file in list`ls results/`:
    filename = f'./results/{file}'
    
    treatments = list`grep "^Running" {filename}`.map(lambda x: eval(x.split("Running")[1]))
    regex = "^[[{]"
    results = list`grep "{regex}" {filename}`
    
    for i, r in enumerate(results):
        try:
            results[i] = eval(r)
        except:
            try:
                results[i] = eval(re.sub('(?<!\[)\s+', ',', r))
            except Exception as err:
                print(err, r)
                print(file)

    for i, (t, r) in enumerate(zip(treatments, results)):
        if i < 320:
            t['dataset'] = files1[i // 32]
        else:
            t['dataset'] = files2[(i - 320) // 32]

        s = frozenset(t.items())
        if s not in pairs:
            pairs[s] = []
        pairs[s].append(r)

df = pd.DataFrame(columns=['dataset', 'smote', 'smooth', 'dodge', 'ultrasample', 'wfo'])
for i, (s, r) in enumerate(pairs.items()):
    t = dict(s)

    if len(np.array(r).shape) == 2:
        perf = np.median(r, axis=0).squeeze()
    
    if i < 320:
        t = {**t, 'pd-pf': perf[0], 'f1': perf[1], 'pd': perf[2], 'pf': perf[3], 'prec': perf[4]}
    else:
        t = {**t, 'pd-pf': perf[2], 'f1': perf[1], 'pd': perf[0], 'pf': perf[3], 'prec': perf[4]}
    df = df.append(t, ignore_index=True) 

result = df.groupby('dataset').apply(get_max_rows)
result.to_csv('results.csv')